{"HUP.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.4;\n\nimport \"./util.sol\";\nimport \"./HUPController.sol\";\n\ncontract HUP is Context, IBEP20, Ownable {\n\n    string public constant name     = \"HUP.LIFE\";\n    string public constant symbol   = \"HUP\";\n    uint8  public constant decimals = 9;\n\n    mapping (address =\u003e uint256) private _rOwned;\n    mapping (address =\u003e uint256) private _tOwned;\n    mapping (address =\u003e bool)    private _isExcluded;\n    mapping (address =\u003e mapping (address =\u003e uint256)) private _allowances;\n\n    address[] private _excluded;\n    address   public  _charityAddress;\n    address   public  _controllerAddress;\n   \n    uint256 private constant MAX = ~uint256(0);\n    uint256 private _tTotal = 420000000000000 * 10**9;\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\n\n    uint256 private _tTaxFeeTotal;\n    \n    uint256 public  _taxFee       = 2; // 2% of every transaction is redistributed to holders\n    uint256 public  _liquidityFee = 2; // 2% of every transaction is kept for liquidity\n    uint256 public  _charityFee   = 2; // 2% of every transaction is kept for charity pool\n    uint256 public  _burnFee      = 2; // 2% of every transaction is burned\n\n    uint256 public  _maxTxAmount            = 210000000000000 * 10**9;\n    uint256 public  _minBalanceForLiquidity = 210000000000 * 10**9;\n    \n    bool private _inSwapAndLiquify;\n    bool public  _autoLiquidityEnabled;\n    bool public  _isAntiWhaleEnabled;\n\n    event MinTokensBeforeSwapUpdated  (uint256 minTokensBeforeSwap);\n    event AutoLiquidityEnabledUpdated (bool enabled);\n    \n    constructor (address cOwner) Ownable(cOwner) {\n        _charityAddress = 0x603a712078985C7983E8b44cc2f769d57bA128e0;\n        \n        // ------------------------ Distribute initial supply ------------------------\n\n        // 5% -\u003e NFTs for Early Adopters\n        _rOwned[0x57bA3FB3bb9c08064a290384990aE30aE6C4fA25] = _rTotal / 100 * 5;\n        emit Transfer(address(0), 0x57bA3FB3bb9c08064a290384990aE30aE6C4fA25, 21000000000000000000000);\n\n        // 5% -\u003e Other Liquidity\n        _rOwned[0x5254c33c64FaE36029C67aE034eeE9df10DaB721] = _rTotal / 100 * 5;\n        emit Transfer(address(0), 0x5254c33c64FaE36029C67aE034eeE9df10DaB721, 21000000000000000000000);\n\n        // 10% -\u003e Legal Fees\n        _rOwned[0x4a5d861cC16172E445f59d2286fFD0f82c9a5378] = _rTotal / 10;\n        emit Transfer(address(0), 0x4a5d861cC16172E445f59d2286fFD0f82c9a5378, 42000000000000000000000);\n\n        // 10% -\u003e Ongoing Platform Expenses\n        _rOwned[0x7DDa985DFD41D5414A8aAB3E0dA46967A12f512E] = _rTotal / 10;\n        emit Transfer(address(0), 0x7DDa985DFD41D5414A8aAB3E0dA46967A12f512E, 42000000000000000000000);\n\n        // 7.5% -\u003e Airdrops \u0026 Bounties\n        _rOwned[0x7db00ACBA863f57fCd4211488D77C4fA43f50a55] = _rTotal / 1000 * 75;\n        emit Transfer(address(0), 0x7db00ACBA863f57fCd4211488D77C4fA43f50a55, 31500000000000000000000);\n\n        // 10% -\u003e Marketing\n        _rOwned[0x5026C61ab44a45946a12edFd5aCffC92e01eB929] = _rTotal / 10;\n        emit Transfer(address(0), 0x5026C61ab44a45946a12edFd5aCffC92e01eB929, 42000000000000000000000);\n\n        // 10% -\u003e Research / Dev / Tech\n        _rOwned[0xecF0156f9FC3fCdEb79dae27f1B676A045Dac36A] = _rTotal / 10;\n        emit Transfer(address(0), 0xecF0156f9FC3fCdEb79dae27f1B676A045Dac36A, 42000000000000000000000);\n\n        // 5% -\u003e Admin / Misc / Reserve\n        _rOwned[0x9061cE4bd8dF426a21b44DC5517577C5Ca4c5d09] = _rTotal / 100 * 5;\n        emit Transfer(address(0), 0x9061cE4bd8dF426a21b44DC5517577C5Ca4c5d09, 21000000000000000000000);\n\n        // 7.5% -\u003e Farming and Staking Rewards\n        _rOwned[0xcE5450f8cCae43b9B0b7071f168E5a66fABa54B0] = _rTotal / 1000 * 75;\n        emit Transfer(address(0), 0xcE5450f8cCae43b9B0b7071f168E5a66fABa54B0, 31500000000000000000000);\n\n        // 10% -\u003e Team, Leadership \u0026 Advisors\n        _rOwned[0x8a45Ea94270F9F11730571B308901ce6E73F287E] = _rTotal / 10;\n        emit Transfer(address(0), 0x8a45Ea94270F9F11730571B308901ce6E73F287E, 42000000000000000000000);\n\n        // 20% -\u003e Locked in contract for Pancakeswap Liquidity\n        _rOwned[address(this)] = _rTotal / 100 * 20;\n        _tOwned[address(this)] = _tTotal / 100 * 20;\n        emit Transfer(address(0), address(this), 84000000000000000000000);\n\n        // ------------------------------------------------------------------------\n\n        // deploy controller\n        HUPController controllerContract = new HUPController(address(this), cOwner);\n        _controllerAddress = address(controllerContract);\n        \n        // exclude system contracts from reflection\n        _isExcluded[address(this)]      = true;\n        _isExcluded[_controllerAddress] = true;\n        _isExcluded[_charityAddress]    = true;\n\n        _excluded.push(address(this));\n        _excluded.push(_controllerAddress);\n        _excluded.push(_charityAddress);\n\n        // approve controller for vesting\n        _approve(address(this), _controllerAddress, 210000000000000000000000);\n    }\n\n    receive() external payable {}\n\n    // BEP20\n    function totalSupply() public view override returns (uint256) {\n        return _tTotal;\n    }\n    function balanceOf(address account) public view override returns (uint256) {\n        if (_isExcluded[account]) return _tOwned[account];\n        return tokenFromReflection(_rOwned[account]);\n    }\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()] - amount);\n        return true;\n    }\n    function approve(address spender, uint256 amount) public override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n    function _approve(address owner, address spender, uint256 amount) private {\n        require(owner != address(0), \"BEP20: approve from the zero address\");\n        require(spender != address(0), \"BEP20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n    function allowance(address owner, address spender) public view override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] - subtractedValue);\n        return true;\n    }\n\n    // STATE\n    function totalTaxFees() public view returns (uint256) {\n        return _tTaxFeeTotal;\n    }\n    function isExcludedFromReward(address account) public view returns (bool) {\n        return _isExcluded[account];\n    }\n    function setCharityAddress(address account) external onlyOwner {\n        includeInReward(_charityAddress);\n        excludeFromReward(account);\n        _charityAddress = account;\n    }\n    function setControllerAddress(address account) external onlyOwner {\n        _controllerAddress = account;\n    }\n    function setMinLiquidityBalance(uint256 amount) external onlyOwner {\n        _minBalanceForLiquidity = amount;\n    }\n    function setMaxTxPercent(uint256 p) external onlyOwner {\n        require(p \u003c= 100, \"Max percentage is 100\");\n        _maxTxAmount = _tTotal * p / 100;\n    }\n    function setTaxFeePercent(uint256 taxFee) external onlyOwner {\n        require(taxFee \u003c= 100, \"Max percentage is 100\");\n        _taxFee = taxFee;\n    }\n    function setLiquidityFeePercent(uint256 liquidityFee) external onlyOwner {\n        require(liquidityFee \u003c= 100, \"Max percentage is 100\");\n        _liquidityFee = liquidityFee;\n    }\n    function setCharityFeePercent(uint256 charityFee) external onlyOwner {\n        require(charityFee \u003c= 100, \"Max percentage is 100\");\n        _charityFee = charityFee;\n    }\n    function setBurnFeePercent(uint256 burnFee) external onlyOwner {\n        require(burnFee \u003c= 100, \"Max percentage is 100\");\n        _burnFee = burnFee;\n    }\n    function setAntiWhaleEnabled(bool enabled) external onlyOwner {\n        _isAntiWhaleEnabled = enabled;\n    }\n    function setAutoLiquidityEnabled(bool enabled) external onlyOwner {\n        _autoLiquidityEnabled = enabled;\n        emit AutoLiquidityEnabledUpdated(enabled);\n    }\n\n    // REFLECTION\n    function deliver(uint256 tAmount) public {\n        address sender = _msgSender();\n        require(!_isExcluded[sender], \"Excluded addresses cannot call this function\");\n\n        (, uint256 tFee, uint256 tLiquidity, uint256 tCharity, uint256 tBurn) = _getTValues(tAmount);\n        uint256 currentRate = _getRate();\n        (uint256 rAmount,,) = _getRValues(tAmount, tFee, tLiquidity, tCharity, tBurn, currentRate);\n\n        _rOwned[sender] = _rOwned[sender] - rAmount;\n        _rTotal         = _rTotal - rAmount;\n        _tTaxFeeTotal   = _tTaxFeeTotal + tAmount;\n    }\n    function reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns(uint256) {\n        require(tAmount \u003c= _tTotal, \"Amount must be less than supply\");\n\n        if (!deductTransferFee) {\n            (, uint256 tFee, uint256 tLiquidity, uint256 tCharity, uint256 tBurn) = _getTValues(tAmount);\n            uint256 currentRate = _getRate();\n            (uint256 rAmount,,) = _getRValues(tAmount, tFee, tLiquidity, tCharity, tBurn, currentRate);\n\n            return rAmount;\n\n        } else {\n            (, uint256 tFee, uint256 tLiquidity, uint256 tCharity, uint256 tBurn) = _getTValues(tAmount);\n            uint256 currentRate = _getRate();\n            (, uint256 rTransferAmount,) = _getRValues(tAmount, tFee, tLiquidity, tCharity, tBurn, currentRate);\n\n            return rTransferAmount;\n        }\n    }\n    function tokenFromReflection(uint256 rAmount) public view returns(uint256) {\n        require(rAmount \u003c= _rTotal, \"Amount must be less than total reflections\");\n\n        uint256 currentRate = _getRate();\n        return rAmount / currentRate;\n    }\n    function excludeFromReward(address account) public onlyOwner {\n        require(!_isExcluded[account], \"Account is already excluded\");\n\n        if (_rOwned[account] \u003e 0) {\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\n        }\n        _isExcluded[account] = true;\n        _excluded.push(account);\n    }\n    function includeInReward(address account) public onlyOwner {\n        require(_isExcluded[account], \"Account is already excluded\");\n\n        for (uint256 i = 0; i \u003c _excluded.length; i++) {\n            if (_excluded[i] == account) {\n                _excluded[i] = _excluded[_excluded.length - 1];\n                _tOwned[account] = 0;\n                _isExcluded[account] = false;\n                _excluded.pop();\n                break;\n            }\n        }\n    }\n\n    // TRANSFER\n    function _transfer(address from, address to, uint256 amount ) private {\n        require(from != address(0), \"BEP20: transfer from the zero address\");\n        require(to != address(0), \"BEP20: transfer to the zero address\");\n        require(amount \u003e 0, \"Transfer amount must be greater than zero\");\n\n        if (from != owner() \u0026\u0026 to != owner()) {\n            require(amount \u003c= _maxTxAmount, \"Transfer amount exceeds the maxTxAmount.\");\n        }\n\n        IHUPController hupController = IHUPController(_controllerAddress);\n\n        /*\n            - if sender holds more than 0.25% of total supply,\n            they can only send max 10% of their balance per day.\n        */\n        if (_isAntiWhaleEnabled \u0026\u0026 !_isExcluded[from]) {\n            hupController.handleAntiWhaleDump(\n                amount, \n                from, \n                balanceOf(from), \n                to, \n                (totalSupply()) * 25 / 10000, \n                10\n            );\n        }\n\n        /*\n            - swapAndLiquify will be initiated when token balance of controller contract\n            has accumulated enough over the minimum number of tokens required.\n            - don\u0027t get caught in a circular liquidity event.\n            - don\u0027t swapAndLiquify if sender is uniswap pair.\n        */\n        if (_autoLiquidityEnabled \u0026\u0026 from != address(this)) {\n            uint256 controllerBalance = balanceOf(_controllerAddress);\n            \n            if (controllerBalance \u003e= _maxTxAmount) {\n                controllerBalance = _maxTxAmount;\n            }\n            \n            bool isOverMinTokenBalance = controllerBalance \u003e= _minBalanceForLiquidity;\n            if (\n                    isOverMinTokenBalance \u0026\u0026\n                    !_inSwapAndLiquify \u0026\u0026\n                    !hupController.isExcludedFromAutoLiquidity(from) \u0026\u0026\n                    !hupController.isExcludedToAutoLiquidity(to)\n                ) {\n                _inSwapAndLiquify = true;\n                hupController.swapAndLiquify(_minBalanceForLiquidity);\n                _inSwapAndLiquify = false;\n            }\n        }\n        \n\n        // ------ SET FEES\n        uint256 previousTaxFee       = _taxFee;\n        uint256 previousLiquidityFee = _liquidityFee;\n        uint256 previousCharityFee   = _charityFee;\n        uint256 previousBurnFee      = _burnFee;\n        \n        if (hupController.isExcludedFromTaxFee(from) || hupController.isExcludedFromTaxFee(to)) {\n            _taxFee = 0;\n        }\n        if (hupController.isExcludedFromLiquidityFee(from) || hupController.isExcludedFromLiquidityFee(to)) {\n            _liquidityFee = 0;\n        }\n        if (hupController.isExcludedFromCharityFee(from) || hupController.isExcludedFromCharityFee(to)) {\n            _charityFee = 0;\n        }\n        if (hupController.isExcludedFromBurnFee(from) || hupController.isExcludedFromBurnFee(to)) {\n            _burnFee = 0;\n        }\n\n        // ------ TRANSFER\n        if (_isExcluded[from] \u0026\u0026 !_isExcluded[to]) {\n            _transferFromExcluded(from, to, amount);\n\n        } else if (!_isExcluded[from] \u0026\u0026 _isExcluded[to]) {\n            _transferToExcluded(from, to, amount);\n\n        } else if (!_isExcluded[from] \u0026\u0026 !_isExcluded[to]) {\n            _transferStandard(from, to, amount);\n\n        } else if (_isExcluded[from] \u0026\u0026 _isExcluded[to]) {\n            _transferBothExcluded(from, to, amount);\n\n        } else {\n            _transferStandard(from, to, amount);\n        }\n\n        // ------ RESTORE FEES\n        _taxFee       = previousTaxFee;\n        _liquidityFee = previousLiquidityFee;\n        _charityFee   = previousCharityFee;\n        _burnFee      = previousBurnFee;\n    }\n\n    function _transferStandard(address sender, address recipient, uint256 tAmount) private {\n        (uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity, uint256 tCharity, uint256 tBurn) = _getTValues(tAmount);\n        uint256 currentRate = _getRate();\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, tLiquidity, tCharity, tBurn, currentRate);\n\n        _rOwned[sender]    = _rOwned[sender] - rAmount;\n        _rOwned[recipient] = _rOwned[recipient] + rTransferAmount;\n\n        _takeLiquidityFee(tLiquidity, currentRate);\n        _takeCharityFee(sender, tCharity, currentRate);\n        _reflectFee(rFee, tBurn * currentRate, tFee, tBurn);\n        emit Transfer(sender, recipient, tTransferAmount);\n    }\n\n    function _transferBothExcluded(address sender, address recipient, uint256 tAmount) private {\n        (uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity, uint256 tCharity, uint256 tBurn) = _getTValues(tAmount);\n        uint256 currentRate = _getRate();\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, tLiquidity, tCharity, tBurn, currentRate);\n\n        _tOwned[sender] = _tOwned[sender] - tAmount;\n        _rOwned[sender] = _rOwned[sender] - rAmount;\n        _tOwned[recipient] = _tOwned[recipient] + tTransferAmount;\n        _rOwned[recipient] = _rOwned[recipient] + rTransferAmount;\n\n        _takeLiquidityFee(tLiquidity, currentRate);\n        _takeCharityFee(sender, tCharity, currentRate);\n        _reflectFee(rFee, tBurn * currentRate, tFee, tBurn);\n        emit Transfer(sender, recipient, tTransferAmount);\n    }\n\n    function _transferToExcluded(address sender, address recipient, uint256 tAmount) private {\n        (uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity, uint256 tCharity, uint256 tBurn) = _getTValues(tAmount);\n        uint256 currentRate = _getRate();\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, tLiquidity, tCharity, tBurn, currentRate);\n\n        _rOwned[sender] = _rOwned[sender] - rAmount;\n        _tOwned[recipient] = _tOwned[recipient] + tTransferAmount;\n        _rOwned[recipient] = _rOwned[recipient] + rTransferAmount;\n\n        _takeLiquidityFee(tLiquidity, currentRate);\n        _takeCharityFee(sender, tCharity, currentRate);\n        _reflectFee(rFee, tBurn * currentRate, tFee, tBurn);\n        emit Transfer(sender, recipient, tTransferAmount);\n    }\n\n    function _transferFromExcluded(address sender, address recipient, uint256 tAmount) private {\n        (uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity, uint256 tCharity, uint256 tBurn) = _getTValues(tAmount);\n        uint256 currentRate = _getRate();\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, tLiquidity, tCharity, tBurn, currentRate);\n\n        _tOwned[sender] = _tOwned[sender] - tAmount;\n        _rOwned[sender] = _rOwned[sender] - rAmount;\n        _rOwned[recipient] = _rOwned[recipient] + rTransferAmount;\n\n        _takeLiquidityFee(tLiquidity, currentRate);\n        _takeCharityFee(sender, tCharity, currentRate);\n        _reflectFee(rFee, tBurn * currentRate, tFee, tBurn);\n        emit Transfer(sender, recipient, tTransferAmount);\n    }\n\n    function _reflectFee(uint256 rFee, uint256 rBurn, uint256 tFee, uint256 tBurn) private {\n        _rTotal       = _rTotal - rFee - rBurn;\n        _tTaxFeeTotal = _tTaxFeeTotal + tFee;\n        _tTotal       = _tTotal - tBurn;\n    }\n\n    function _getTValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256) {\n        uint256 tFee       = tAmount * _taxFee / 100;\n        uint256 tLiquidity = tAmount * _liquidityFee / 100;\n        uint256 tCharity   = tAmount * _charityFee / 100;\n        uint256 tBurn      = tAmount * _burnFee / 100;\n        uint256 tTransferAmount = tAmount - tFee;\n        tTransferAmount = tTransferAmount - tLiquidity;\n        tTransferAmount = tTransferAmount - tCharity;\n        tTransferAmount = tTransferAmount - tBurn;\n        return (tTransferAmount, tFee, tLiquidity, tCharity, tBurn);\n    }\n\n    function _getRValues(uint256 tAmount, uint256 tFee, uint256 tLiquidity, uint256 tCharity, uint256 tBurn, uint256 currentRate) private pure returns (uint256, uint256, uint256) {\n        uint256 rAmount     = tAmount * currentRate;\n        uint256 rFee        = tFee * currentRate;\n        uint256 rLiquidity  = tLiquidity * currentRate;\n        uint256 rCharity    = tCharity * currentRate;\n        uint256 rBurn       = tBurn * currentRate;\n        uint256 rTransferAmount = rAmount - rFee;\n        rTransferAmount = rTransferAmount - rLiquidity;\n        rTransferAmount = rTransferAmount - rCharity;\n        rTransferAmount = rTransferAmount - rBurn;\n        return (rAmount, rTransferAmount, rFee);\n    }\n\n    function _getRate() private view returns(uint256) {\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\n        return rSupply / tSupply;\n    }\n\n    function _getCurrentSupply() private view returns(uint256, uint256) {\n        uint256 rSupply = _rTotal;\n        uint256 tSupply = _tTotal;      \n        for (uint256 i = 0; i \u003c _excluded.length; i++) {\n            if (_rOwned[_excluded[i]] \u003e rSupply || _tOwned[_excluded[i]] \u003e tSupply) return (_rTotal, _tTotal);\n            rSupply = rSupply - _rOwned[_excluded[i]];\n            tSupply = tSupply - _tOwned[_excluded[i]];\n        }\n        if (rSupply \u003c _rTotal / _tTotal) return (_rTotal, _tTotal);\n        return (rSupply, tSupply);\n    }\n\n    function _takeLiquidityFee(uint256 tLiquidity, uint256 currentRate) private {\n        if (tLiquidity == 0) { return; }\n\n        uint256 rLiquidity = tLiquidity * currentRate;\n        _rOwned[_controllerAddress] = _rOwned[_controllerAddress] + rLiquidity;\n        if (_isExcluded[_controllerAddress]) {\n            _tOwned[_controllerAddress] = _tOwned[_controllerAddress] + tLiquidity;\n        }\n    }\n\n    function _takeCharityFee(address sender, uint256 tCharity, uint256 currentRate) private {\n        if (tCharity == 0) { return; }\n\n        uint256 rCharity = tCharity * currentRate;\n        _rOwned[_charityAddress] = _rOwned[_charityAddress] + rCharity;\n        if (_isExcluded[_charityAddress]) {\n            _tOwned[_charityAddress] = _tOwned[_charityAddress] + tCharity;\n        }\n        emit Transfer(sender, _charityAddress, tCharity);\n    }\n\n}\n\n\n"},"HUPController.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.4;\n\nimport \"./util.sol\";\n\ncontract HUPController is Context {\n\n    address private immutable _tokenContract;\n    address private immutable _tokenOwner;\n\n    mapping (address =\u003e bool) private _isExcludedFromTaxFee;\n    mapping (address =\u003e bool) private _isExcludedFromLiquidityFee;\n    mapping (address =\u003e bool) private _isExcludedFromCharityFee;\n    mapping (address =\u003e bool) private _isExcludedFromBurnFee;\n    mapping (address =\u003e uint) public  _lastTimeSold;\n    mapping (address =\u003e bool) public  _isExcludedFromAutoLiquidity;\n    mapping (address =\u003e bool) public  _isExcludedToAutoLiquidity;\n\n    uint256 public _lastTeamFundsReleased;\n    uint256 public _lastLiquidityFundsReleased;\n    uint public _teamFundsReleasedCount;\n    uint public _liquidityFundsReleasedCount;\n\n    bool _inSwapAndLiquify;\n\n    IUniswapV2Router02 public _uniswapV2Router;\n    address            public _uniswapV2Pair;\n\n    event SwapAndLiquify(uint256 tokensSwapped, uint256 bnbReceived, uint256 tokensIntoLiqudity);\n\n    modifier onlyOwner() {\n        require(_msgSender() == _tokenContract || _msgSender() == _tokenOwner, \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    constructor(address tokenContract, address tokenOwner) {\n        _tokenContract = tokenContract;\n        _tokenOwner    = tokenOwner;\n        \n        IUniswapV2Router02 uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\n\n        _uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory())\n            .createPair(tokenContract, uniswapV2Router.WETH());\n\n        _uniswapV2Router = uniswapV2Router;\n\n        // exclude system contracts from fees\n        _isExcludedFromTaxFee[address(this)]       = true;\n        _isExcludedFromLiquidityFee[address(this)] = true;\n        _isExcludedFromCharityFee[address(this)]   = true;\n        _isExcludedFromBurnFee[address(this)]      = true;\n\n        _isExcludedFromTaxFee[tokenContract]       = true;\n        _isExcludedFromLiquidityFee[tokenContract] = true;\n        _isExcludedFromCharityFee[tokenContract]   = true;\n        _isExcludedFromBurnFee[tokenContract]      = true;\n\n        _isExcludedFromAutoLiquidity[_uniswapV2Pair]            = true;\n        _isExcludedFromAutoLiquidity[address(_uniswapV2Router)] = true;\n    }\n\n    receive() external payable {}\n\n    // UNISWAP\n    function uniswapPair() public view returns(address) {\n        return _uniswapV2Pair;\n    }\n    function uniswapRouter() public view returns(address) {\n        return address(_uniswapV2Router);\n    }\n    function setUniswapRouter(address r) external onlyOwner {\n        IUniswapV2Router02 uniswapV2Router = IUniswapV2Router02(r);\n        _uniswapV2Router = uniswapV2Router;\n    }\n    function setUniswapPair(address p) external onlyOwner {\n        _uniswapV2Pair = p;\n    }\n\n    // AUTO LIQUIDITY\n    function swapAndLiquify(uint256 contractTokenBalance) external onlyOwner {\n        if (_inSwapAndLiquify) { return; }\n        _inSwapAndLiquify = true;\n\n        // split contract balance into halves\n        uint256 half      = contractTokenBalance / 2;\n        uint256 otherHalf = contractTokenBalance - half;\n\n        /*\n            capture the contract\u0027s current BNB balance.\n            this is so that we can capture exactly the amount of BNB that\n            the swap creates, and not make the liquidity event include any BNB\n            that has been manually sent to the contract.\n        */\n        uint256 initialBalance = address(this).balance;\n\n        // approve to cover all possible scenario\n        IBEP20 HUPToken = IBEP20(_tokenContract);\n        HUPToken.approve(address(_uniswapV2Router), contractTokenBalance);\n\n        // swap tokens for BNB\n        swapTokensForBnb(half);\n\n        // this is the amount of BNB that we just swapped into\n        uint256 newBalance = address(this).balance - initialBalance;\n\n        // add liquidity to uniswap\n        addLiquidity(otherHalf, newBalance);\n\n        _inSwapAndLiquify = false;\n        emit SwapAndLiquify(half, newBalance, otherHalf);\n    }\n    function swapTokensForBnb(uint256 tokenAmount) private {\n        // generate the uniswap pair path of token -\u003e weth\n        address[] memory path = new address[](2);\n        path[0] = _tokenContract;\n        path[1] = _uniswapV2Router.WETH();\n\n        // make the swap\n        _uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n            tokenAmount,\n            0, // accept any amount of BNB\n            path,\n            address(this),\n            block.timestamp\n        );\n    }\n    function addLiquidity(uint256 tokenAmount, uint256 bnbAmount) private {\n        _uniswapV2Router.addLiquidityETH{value: bnbAmount}(\n            _tokenContract,\n            tokenAmount,\n            0, // slippage is unavoidable\n            0, // slippage is unavoidable\n            address(this),\n            block.timestamp\n        );\n    }\n    function isExcludedFromAutoLiquidity(address account) public view returns(bool) {\n        return _isExcludedFromAutoLiquidity[account];\n    }\n    function isExcludedToAutoLiquidity(address account) public view returns(bool) {\n        return _isExcludedToAutoLiquidity[account];\n    }\n    function setExcludedFromAutoLiquidity(address account, bool e) external onlyOwner {\n        _isExcludedFromAutoLiquidity[account] = e;\n    }\n    function setExcludedToAutoLiquidity(address account, bool e) external onlyOwner {\n        _isExcludedToAutoLiquidity[account] = e;\n    }\n\n    // ANTI WHALE DUMP\n    function handleAntiWhaleDump(uint256 amount, address sender, uint256 senderBalance, address recipient, uint256 threshold, uint256 thresholdAllowance) external onlyOwner {\n        if (recipient == address(_uniswapV2Router) || recipient == address(_uniswapV2Pair)) {\n            if (senderBalance \u003e threshold) {\n                require(amount \u003c senderBalance / thresholdAllowance, \"Sell amount is too high\");\n                require(block.timestamp - _lastTimeSold[sender] \u003e 1 days, \"You can only sell once per day\");\n            }\n            _lastTimeSold[sender] = block.timestamp;\n        }\n    }\n    function lastTimeSold(address account) public view returns(uint) {\n        return _lastTimeSold[account];\n    }\n    function setLastTimeSold(address account, uint l) external onlyOwner {\n        _lastTimeSold[account] = l;\n    }\n\n    // VESTING\n    function releaseLiquidityFunds() external onlyOwner {\n        require(_liquidityFundsReleasedCount \u003c 6, \"Can\u0027t release any more liquidity funds\");\n        require(block.timestamp - _lastLiquidityFundsReleased \u003e 1 weeks, \"Not enough time has passed to release liquidity funds\");\n\n        address liquidityWallet = 0x19AFd2886C8e3F7664d9C13BcE61Da19Aca689Dc;\n\n        IBEP20 HUPToken = IBEP20(_tokenContract);\n        HUPToken.transferFrom(_tokenContract, liquidityWallet, 14000000000000000000000);\n        _lastLiquidityFundsReleased = block.timestamp;\n        _liquidityFundsReleasedCount++;\n    }\n\n    // TAX FEE\n    function isExcludedFromTaxFee(address account) public view returns(bool) {\n        return _isExcludedFromTaxFee[account];\n    }\n    function isExcludedFromTaxFees(address a, address b) public view returns(bool) {\n        return _isExcludedFromTaxFee[a] || _isExcludedFromTaxFee[b];\n    }\n    function setExcludedFromTaxFee(address account, bool e) external onlyOwner {\n        _isExcludedFromTaxFee[account] = e;\n    }\n\n    // LIQUIDITY FEE\n    function isExcludedFromLiquidityFee(address account) public view returns(bool) {\n        return _isExcludedFromLiquidityFee[account];\n    }\n    function isExcludedFromLiquidityFees(address a, address b) public view returns(bool) {\n        return _isExcludedFromLiquidityFee[a] || _isExcludedFromLiquidityFee[b];\n    }\n    function setExcludedFromLiquidityFee(address account, bool e) external onlyOwner {\n        _isExcludedFromLiquidityFee[account] = e;\n    }\n\n    // CHARITY FEE\n    function isExcludedFromCharityFee(address account) public view returns(bool) {\n        return _isExcludedFromCharityFee[account];\n    }\n    function isExcludedFromCharityFees(address a, address b) public view returns(bool) {\n        return _isExcludedFromCharityFee[a] || _isExcludedFromCharityFee[b];\n    }\n    function setExcludedFromCharityFee(address account, bool e) external onlyOwner {\n        _isExcludedFromCharityFee[account] = e;\n    }\n\n    // BURN FEE\n    function isExcludedFromBurnFee(address account) public view returns(bool) {\n        return _isExcludedFromBurnFee[account];\n    }\n    function isExcludedFromBurnFees(address a, address b) public view returns(bool) {\n        return _isExcludedFromBurnFee[a] || _isExcludedFromBurnFee[b];\n    }\n    function setExcludedFromBurnFee(address account, bool e) external onlyOwner {\n        _isExcludedFromBurnFee[account] = e;\n    }\n\n}\n\n\n"},"util.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.4;\n\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\ncontract Ownable is Context {\n    address private _owner;\n    address private _previousOwner;\n    uint256 private _lockTime;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor (address initialOwner) {\n        _owner = initialOwner;\n        emit OwnershipTransferred(address(0), initialOwner);\n    }\n\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n\n    function getUnlockTime() public view returns (uint256) {\n        return _lockTime;\n    }\n\n    function lock(uint256 time) public virtual onlyOwner {\n        _previousOwner = _owner;\n        _owner = address(0);\n        _lockTime = block.timestamp + time;\n        emit OwnershipTransferred(_previousOwner, address(0));\n    }\n    \n    function unlock() public virtual {\n        require(_previousOwner == msg.sender, \"You don\u0027t have permission to unlock\");\n        require(block.timestamp \u003e _lockTime , \"Contract is still locked\");\n        emit OwnershipTransferred(_owner, _previousOwner);\n        _owner = _previousOwner;\n    }\n}\n\ninterface IBEP20 {\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ninterface IUniswapV2Factory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n    function feeTo() external view returns (address);\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function allPairs(uint) external view returns (address pair);\n    function allPairsLength() external view returns (uint);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n    function setFeeToSetter(address) external;\n}\n\ninterface IUniswapV2Pair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n\ninterface IHUPController {\n    function uniswapPair()   external view returns(address);\n    function uniswapRouter() external view returns(address);\n    function setUniswapRouter (address r) external;\n    function setUniswapPair   (address p) external;\n\n    function swapAndLiquify(uint256 contractTokenBalance) external;\n    function handleAntiWhaleDump(\n        uint256 amount, \n        address sender, \n        uint256 senderBalance, \n        address recipient, \n        uint256 threshold, \n        uint256 thresholdAllowance\n    ) external;\n\n    function isExcludedFromAutoLiquidity  (address account) external view returns(bool);\n    function isExcludedToAutoLiquidity    (address account) external view returns(bool);\n    function setExcludedFromAutoLiquidity (address account, bool e) external;\n    function setExcludedToAutoLiquidity   (address account, bool e) external;\n\n    function lastTimeSold               (address account) external view returns(uint);\n    function setLastTimeSold            (address account, uint l) external;\n\n    function setTeamAddress             (address account) external;\n    function releaseTeamFunds           () external;\n    function releaseLiquidityFunds      () external;\n\n    function isExcludedFromTaxFee        (address account) external view returns(bool);\n    function isExcludedFromLiquidityFee  (address account) external view returns(bool);\n    function isExcludedFromCharityFee    (address account) external view returns(bool);\n    function isExcludedFromBurnFee       (address account) external view returns(bool);\n\n    function isExcludedFromTaxFees       (address a, address b) external view returns(bool);\n    function isExcludedFromLiquidityFees (address a, address b) external view returns(bool);\n    function isExcludedFromCharityFees   (address a, address b) external view returns(bool);\n    function isExcludedFromBurnFees      (address a, address b) external view returns(bool);\n\n    function setExcludedFromTaxFee       (address account, bool e) external;\n    function setExcludedFromLiquidityFee (address account, bool e) external;\n    function setExcludedFromCharityFee   (address account, bool e) external;\n    function setExcludedFromBurnFee      (address account, bool e) external;\n}\n\n\n"}}